{"ast":null,"code":"import client from \"./client\";\nexport const uploadPost = async formData => {\n  try {\n    const {\n      data\n    } = await client.post(\"/post/create\", formData);\n    return data;\n  } catch (error) {\n    const {\n      response\n    } = error;\n\n    if (response !== null && response !== void 0 && response.data) {\n      return response.data;\n    }\n\n    return {\n      error: error.message || error\n    };\n  }\n};\nexport const getPosts = async (pageNo, limit) => {\n  try {\n    const {\n      data\n    } = await client(\"/post/posts?pageNo=\" + pageNo + \"&limit=\" + limit);\n    return data;\n  } catch (error) {\n    const {\n      response\n    } = error;\n\n    if (response !== null && response !== void 0 && response.data) {\n      return response.data;\n    }\n\n    return {\n      error: error.message || error\n    };\n  }\n};\nexport const uploadImage = async imageFile => {\n  try {\n    const {\n      data\n    } = await client.post(\"/post/upload-image\", imageFile);\n    return data;\n  } catch (error) {\n    const {\n      response\n    } = error;\n\n    if (response !== null && response !== void 0 && response.data) {\n      return response.data;\n    }\n\n    return {\n      error: error.message || error\n    };\n  }\n};\nexport const updatePost = async (postId, formData) => {\n  try {\n    const {\n      data\n    } = await client.put(\"/post/\" + postId, formData);\n    return data;\n  } catch (error) {\n    const {\n      response\n    } = error;\n\n    if (response !== null && response !== void 0 && response.data) {\n      return response.data;\n    }\n\n    return {\n      error: error.message || error\n    };\n  }\n};\nexport const getPost = async slug => {\n  try {\n    const {\n      data\n    } = await client(\"/post/single/\" + slug);\n    return data;\n  } catch (error) {\n    const {\n      response\n    } = error;\n\n    if (response !== null && response !== void 0 && response.data) {\n      return response.data;\n    }\n\n    return {\n      error: error.message || error\n    };\n  }\n};\nexport const deletePost = async id => {\n  try {\n    const {\n      data\n    } = await client.delete(\"/post/\" + id);\n    return data;\n  } catch (error) {\n    const {\n      response\n    } = error;\n\n    if (response !== null && response !== void 0 && response.data) {\n      return response.data;\n    }\n\n    return {\n      error: error.message || error\n    };\n  }\n};\nexport const searchPost = async query => {\n  try {\n    const {\n      data\n    } = await client(\"/post/search?title=\" + query);\n    return data;\n  } catch (error) {\n    const {\n      response\n    } = error;\n\n    if (response !== null && response !== void 0 && response.data) {\n      return response.data;\n    }\n\n    return {\n      error: error.message || error\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/Ryker/Desktop/final-year/front/news-builder/src/api/post.js"],"names":["client","uploadPost","formData","data","post","error","response","message","getPosts","pageNo","limit","uploadImage","imageFile","updatePost","postId","put","getPost","slug","deletePost","id","delete","searchPost","query"],"mappings":"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","sourcesContent":["import client from \"./client\";\r\n\r\nexport const uploadPost = async (formData) => {\r\n  try {\r\n    const { data } = await client.post(\"/post/create\", formData);\r\n    return data;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    if (response?.data) {\r\n      return response.data;\r\n    }\r\n    return { error: error.message || error };\r\n  }\r\n};\r\n\r\nexport const getPosts = async (pageNo, limit) => {\r\n  try {\r\n    const { data } = await client(\r\n      \"/post/posts?pageNo=\" + pageNo + \"&limit=\" + limit\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    if (response?.data) {\r\n      return response.data;\r\n    }\r\n    return { error: error.message || error };\r\n  }\r\n};\r\n\r\nexport const uploadImage = async (imageFile) => {\r\n  try {\r\n    const { data } = await client.post(\"/post/upload-image\", imageFile);\r\n    return data;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    if (response?.data) {\r\n      return response.data;\r\n    }\r\n    return { error: error.message || error };\r\n  }\r\n};\r\n\r\nexport const updatePost = async (postId, formData) => {\r\n  try {\r\n    const { data } = await client.put(\"/post/\" + postId, formData);\r\n    return data;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    if (response?.data) {\r\n      return response.data;\r\n    }\r\n    return { error: error.message || error };\r\n  }\r\n};\r\n\r\nexport const getPost = async (slug) => {\r\n  try {\r\n    const { data } = await client(\"/post/single/\" + slug);\r\n    return data;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    if (response?.data) {\r\n      return response.data;\r\n    }\r\n    return { error: error.message || error };\r\n  }\r\n};\r\n\r\nexport const deletePost = async (id) => {\r\n  try {\r\n    const { data } = await client.delete(\"/post/\" + id);\r\n    return data;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    if (response?.data) {\r\n      return response.data;\r\n    }\r\n    return { error: error.message || error };\r\n  }\r\n};\r\n\r\nexport const searchPost = async (query) => {\r\n  try {\r\n    const { data } = await client(\"/post/search?title=\" + query);\r\n    return data;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    if (response?.data) {\r\n      return response.data;\r\n    }\r\n    return { error: error.message || error };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}