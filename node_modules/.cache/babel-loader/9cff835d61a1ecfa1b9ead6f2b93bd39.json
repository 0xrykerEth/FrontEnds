{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryker\\\\Desktop\\\\final-year\\\\front\\\\news-builder\\\\src\\\\components\\\\UpdatePost.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ReactLoading from \"react-loading\";\nimport { useParams } from \"react-router-dom\";\nimport { getPost, updatePost } from \"../api/post\";\nimport { useNotification } from \"../context/NotificationProvider\";\nimport NotFound from \"./NotFound\";\nimport PostForm from \"./PostForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UpdatePost() {\n  _s();\n\n  const {\n    slug\n  } = useParams();\n  const [postInfo, setPostInfo] = useState(null);\n  const [uploadingPost, setUploadingPost] = useState(false);\n  const [fetchingPost, setFetchingPost] = useState(true);\n  const [notFound, setNotFound] = useState(false);\n  const {\n    updateNotification\n  } = useNotification();\n\n  const fetchPost = async () => {\n    const {\n      error,\n      post\n    } = await getPost(slug);\n    setFetchingPost(false);\n\n    if (error) {\n      setNotFound(true);\n      return updateNotification(\"error\", error);\n    }\n\n    const {\n      title,\n      content,\n      thumbnail,\n      tags,\n      meta,\n      id,\n      featured\n    } = post;\n    setPostInfo({\n      title,\n      content,\n      thumbnail,\n      tags: tags.join(\", \"),\n      meta,\n      featured,\n      id\n    });\n  };\n\n  useEffect(() => {\n    fetchPost();\n  }, [slug]);\n\n  const handleSubmit = async data => {\n    setUploadingPost(true);\n    const {\n      error,\n      post\n    } = await updatePost(postInfo === null || postInfo === void 0 ? void 0 : postInfo.id, data);\n    setUploadingPost(false);\n    if (error) return updateNotification(\"error\", error);\n    updateNotification(\"success\", \"Post updated successfully!\");\n    const {\n      title,\n      content,\n      thumbnail,\n      tags,\n      meta,\n      id,\n      featured\n    } = post;\n    setPostInfo({\n      title,\n      content,\n      thumbnail,\n      tags: tags.join(\", \"),\n      meta,\n      featured,\n      id\n    });\n  };\n\n  if (fetchingPost) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-10 flex justify-center items-center\",\n    children: /*#__PURE__*/_jsxDEV(ReactLoading, {\n      type: \"bars\",\n      color: \"lightblue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n  if (notFound) return /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(PostForm, {\n    formTitle: \"Update Post\",\n    initialPost: postInfo,\n    onSubmit: handleSubmit,\n    busy: uploadingPost,\n    postBtnTitle: \"Update\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UpdatePost, \"ufF4Mv4oFgABY7y1EK8edTyQCBw=\", false, function () {\n  return [useParams, useNotification];\n});\n\n_c = UpdatePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdatePost\");","map":{"version":3,"sources":["C:/Users/Ryker/Desktop/final-year/front/news-builder/src/components/UpdatePost.jsx"],"names":["React","useEffect","useState","ReactLoading","useParams","getPost","updatePost","useNotification","NotFound","PostForm","UpdatePost","slug","postInfo","setPostInfo","uploadingPost","setUploadingPost","fetchingPost","setFetchingPost","notFound","setNotFound","updateNotification","fetchPost","error","post","title","content","thumbnail","tags","meta","id","featured","join","handleSubmit","data"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ReactLoading from \"react-loading\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { getPost, updatePost } from \"../api/post\";\r\nimport { useNotification } from \"../context/NotificationProvider\";\r\nimport NotFound from \"./NotFound\";\r\nimport PostForm from \"./PostForm\";\r\n\r\nexport default function UpdatePost() {\r\n  const { slug } = useParams();\r\n  const [postInfo, setPostInfo] = useState(null);\r\n  const [uploadingPost, setUploadingPost] = useState(false);\r\n  const [fetchingPost, setFetchingPost] = useState(true);\r\n  const [notFound, setNotFound] = useState(false);\r\n\r\n  const { updateNotification } = useNotification();\r\n\r\n  const fetchPost = async () => {\r\n    const { error, post } = await getPost(slug);\r\n    setFetchingPost(false);\r\n    if (error) {\r\n      setNotFound(true);\r\n      return updateNotification(\"error\", error);\r\n    }\r\n\r\n    const { title, content, thumbnail, tags, meta, id, featured } = post;\r\n    setPostInfo({\r\n      title,\r\n      content,\r\n      thumbnail,\r\n      tags: tags.join(\", \"),\r\n      meta,\r\n      featured,\r\n      id,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPost();\r\n  }, [slug]);\r\n\r\n  const handleSubmit = async (data) => {\r\n    setUploadingPost(true);\r\n    const { error, post } = await updatePost(postInfo?.id, data);\r\n    setUploadingPost(false);\r\n    if (error) return updateNotification(\"error\", error);\r\n    updateNotification(\"success\", \"Post updated successfully!\");\r\n    const { title, content, thumbnail, tags, meta, id, featured } = post;\r\n    setPostInfo({\r\n      title,\r\n      content,\r\n      thumbnail,\r\n      tags: tags.join(\", \"),\r\n      meta,\r\n      featured,\r\n      id,\r\n    });\r\n  };\r\n\r\n  if (fetchingPost)\r\n    return (\r\n      <div className=\"p-10 flex justify-center items-center\">\r\n        <ReactLoading type=\"bars\" color=\"lightblue\" />\r\n      </div>\r\n    );\r\n\r\n  if (notFound) return <NotFound />;\r\n\r\n  return (\r\n    <PostForm\r\n      formTitle=\"Update Post\"\r\n      initialPost={postInfo}\r\n      onSubmit={handleSubmit}\r\n      busy={uploadingPost}\r\n      postBtnTitle=\"Update\"\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}